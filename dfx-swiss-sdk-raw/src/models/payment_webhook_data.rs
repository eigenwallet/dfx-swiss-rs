/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentWebhookData {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f64>,
    /// UID of the transaction
    #[serde(rename = "uid")]
    pub uid: String,
    /// UID of the order of the transaction
    #[serde(rename = "orderUid", skip_serializing_if = "Option::is_none")]
    pub order_uid: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "state")]
    pub state: State,
    #[serde(rename = "inputAmount", skip_serializing_if = "Option::is_none")]
    pub input_amount: Option<f64>,
    #[serde(rename = "inputAsset", skip_serializing_if = "Option::is_none")]
    pub input_asset: Option<String>,
    /// Fiat ID for buy transactions, asset ID otherwise
    #[serde(rename = "inputAssetId", skip_serializing_if = "Option::is_none")]
    pub input_asset_id: Option<f64>,
    #[serde(rename = "inputBlockchain", skip_serializing_if = "Option::is_none")]
    pub input_blockchain: Option<InputBlockchain>,
    #[serde(rename = "inputPaymentMethod", skip_serializing_if = "Option::is_none")]
    pub input_payment_method: Option<InputPaymentMethod>,
    #[serde(rename = "inputTxId", skip_serializing_if = "Option::is_none")]
    pub input_tx_id: Option<String>,
    #[serde(rename = "inputTxUrl", skip_serializing_if = "Option::is_none")]
    pub input_tx_url: Option<String>,
    /// Chargeback address or chargeback IBAN
    #[serde(rename = "chargebackTarget", skip_serializing_if = "Option::is_none")]
    pub chargeback_target: Option<String>,
    /// Chargeback amount in chargeback asset
    #[serde(rename = "chargebackAmount", skip_serializing_if = "Option::is_none")]
    pub chargeback_amount: Option<f64>,
    #[serde(rename = "chargebackAsset", skip_serializing_if = "Option::is_none")]
    pub chargeback_asset: Option<String>,
    /// Fiat ID for sell transaction refunds, asset ID otherwise
    #[serde(rename = "chargebackAssetId", skip_serializing_if = "Option::is_none")]
    pub chargeback_asset_id: Option<f64>,
    #[serde(rename = "chargebackTxId", skip_serializing_if = "Option::is_none")]
    pub chargeback_tx_id: Option<String>,
    #[serde(rename = "chargebackTxUrl", skip_serializing_if = "Option::is_none")]
    pub chargeback_tx_url: Option<String>,
    #[serde(rename = "chargebackDate", skip_serializing_if = "Option::is_none")]
    pub chargeback_date: Option<String>,
    #[serde(rename = "date")]
    pub date: String,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    /// Exchange rate in input/output
    #[serde(rename = "exchangeRate", skip_serializing_if = "Option::is_none")]
    pub exchange_rate: Option<f64>,
    /// Final rate (incl. fees) in input/output
    #[serde(rename = "rate", skip_serializing_if = "Option::is_none")]
    pub rate: Option<f64>,
    #[serde(rename = "outputAmount", skip_serializing_if = "Option::is_none")]
    pub output_amount: Option<f64>,
    #[serde(rename = "outputAsset", skip_serializing_if = "Option::is_none")]
    pub output_asset: Option<String>,
    /// Fiat ID for sell transactions, asset ID otherwise
    #[serde(rename = "outputAssetId", skip_serializing_if = "Option::is_none")]
    pub output_asset_id: Option<f64>,
    #[serde(rename = "outputBlockchain", skip_serializing_if = "Option::is_none")]
    pub output_blockchain: Option<OutputBlockchain>,
    #[serde(rename = "outputPaymentMethod", skip_serializing_if = "Option::is_none")]
    pub output_payment_method: Option<OutputPaymentMethod>,
    #[serde(rename = "outputTxId", skip_serializing_if = "Option::is_none")]
    pub output_tx_id: Option<String>,
    #[serde(rename = "outputTxUrl", skip_serializing_if = "Option::is_none")]
    pub output_tx_url: Option<String>,
    #[serde(rename = "outputDate", skip_serializing_if = "Option::is_none")]
    pub output_date: Option<String>,
    #[serde(rename = "priceSteps", skip_serializing_if = "Option::is_none")]
    pub price_steps: Option<Vec<String>>,
    /// Fee amount in input asset
    #[serde(rename = "feeAmount", skip_serializing_if = "Option::is_none")]
    pub fee_amount: Option<f64>,
    #[serde(rename = "feeAsset", skip_serializing_if = "Option::is_none")]
    pub fee_asset: Option<String>,
    /// Fee infos in input asset
    #[serde(rename = "fees", skip_serializing_if = "Option::is_none")]
    pub fees: Option<Box<models::FeeDto>>,
    #[serde(rename = "externalTransactionId", skip_serializing_if = "Option::is_none")]
    pub external_transaction_id: Option<String>,
    #[serde(rename = "sourceAccount", skip_serializing_if = "Option::is_none")]
    pub source_account: Option<String>,
    #[serde(rename = "targetAccount", skip_serializing_if = "Option::is_none")]
    pub target_account: Option<String>,
    #[serde(rename = "dfxReference")]
    pub dfx_reference: f64,
}

impl PaymentWebhookData {
    pub fn new(uid: String, r#type: Type, state: State, date: String, dfx_reference: f64) -> PaymentWebhookData {
        PaymentWebhookData {
            id: None,
            uid,
            order_uid: None,
            r#type,
            state,
            input_amount: None,
            input_asset: None,
            input_asset_id: None,
            input_blockchain: None,
            input_payment_method: None,
            input_tx_id: None,
            input_tx_url: None,
            chargeback_target: None,
            chargeback_amount: None,
            chargeback_asset: None,
            chargeback_asset_id: None,
            chargeback_tx_id: None,
            chargeback_tx_url: None,
            chargeback_date: None,
            date,
            reason: None,
            exchange_rate: None,
            rate: None,
            output_amount: None,
            output_asset: None,
            output_asset_id: None,
            output_blockchain: None,
            output_payment_method: None,
            output_tx_id: None,
            output_tx_url: None,
            output_date: None,
            price_steps: None,
            fee_amount: None,
            fee_asset: None,
            fees: None,
            external_transaction_id: None,
            source_account: None,
            target_account: None,
            dfx_reference,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Buy")]
    Buy,
    #[serde(rename = "Sell")]
    Sell,
    #[serde(rename = "Swap")]
    Swap,
    #[serde(rename = "Referral")]
    Referral,
}

impl Default for Type {
    fn default() -> Type {
        Self::Buy
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "Created")]
    Created,
    #[serde(rename = "Processing")]
    Processing,
    #[serde(rename = "LiquidityPending")]
    LiquidityPending,
    #[serde(rename = "CheckPending")]
    CheckPending,
    #[serde(rename = "KycRequired")]
    KycRequired,
    #[serde(rename = "LimitExceeded")]
    LimitExceeded,
    #[serde(rename = "FeeTooHigh")]
    FeeTooHigh,
    #[serde(rename = "PriceUndeterminable")]
    PriceUndeterminable,
    #[serde(rename = "PayoutInProgress")]
    PayoutInProgress,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "ReturnPending")]
    ReturnPending,
    #[serde(rename = "Returned")]
    Returned,
    #[serde(rename = "Unassigned")]
    Unassigned,
    #[serde(rename = "WaitingForPayment")]
    WaitingForPayment,
}

impl Default for State {
    fn default() -> State {
        Self::Created
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InputBlockchain {
    #[serde(rename = "Bitcoin")]
    Bitcoin,
    #[serde(rename = "Lightning")]
    Lightning,
    #[serde(rename = "Monero")]
    Monero,
    #[serde(rename = "Ethereum")]
    Ethereum,
    #[serde(rename = "BinanceSmartChain")]
    BinanceSmartChain,
    #[serde(rename = "Optimism")]
    Optimism,
    #[serde(rename = "Arbitrum")]
    Arbitrum,
    #[serde(rename = "Polygon")]
    Polygon,
    #[serde(rename = "Base")]
    Base,
    #[serde(rename = "Haqq")]
    Haqq,
    #[serde(rename = "Liquid")]
    Liquid,
    #[serde(rename = "Arweave")]
    Arweave,
    #[serde(rename = "Cardano")]
    Cardano,
    #[serde(rename = "DeFiChain")]
    DeFiChain,
    #[serde(rename = "Railgun")]
    Railgun,
    #[serde(rename = "BinancePay")]
    BinancePay,
    #[serde(rename = "Solana")]
    Solana,
    #[serde(rename = "Gnosis")]
    Gnosis,
}

impl Default for InputBlockchain {
    fn default() -> InputBlockchain {
        Self::Bitcoin
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InputPaymentMethod {
    #[serde(rename = "Bank")]
    Bank,
    #[serde(rename = "Instant")]
    Instant,
    #[serde(rename = "Card")]
    Card,
    #[serde(rename = "Crypto")]
    Crypto,
}

impl Default for InputPaymentMethod {
    fn default() -> InputPaymentMethod {
        Self::Bank
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "MonthlyLimitExceeded")]
    MonthlyLimitExceeded,
    #[serde(rename = "AnnualLimitExceeded")]
    AnnualLimitExceeded,
    #[serde(rename = "AccountHolderMismatch")]
    AccountHolderMismatch,
    #[serde(rename = "KycRejected")]
    KycRejected,
    #[serde(rename = "FraudSuspicion")]
    FraudSuspicion,
    #[serde(rename = "SanctionSuspicion")]
    SanctionSuspicion,
    #[serde(rename = "MinDepositNotReached")]
    MinDepositNotReached,
    #[serde(rename = "AssetNotAvailable")]
    AssetNotAvailable,
    #[serde(rename = "AssetNotAvailableWithChosenBank")]
    AssetNotAvailableWithChosenBank,
    #[serde(rename = "StakingDiscontinued")]
    StakingDiscontinued,
    #[serde(rename = "BankNotAllowed")]
    BankNotAllowed,
    #[serde(rename = "PaymentAccountNotAllowed")]
    PaymentAccountNotAllowed,
    #[serde(rename = "CountryNotAllowed")]
    CountryNotAllowed,
    #[serde(rename = "InstantPayment")]
    InstantPayment,
    #[serde(rename = "FeeTooHigh")]
    FeeTooHigh,
    #[serde(rename = "ReceiverRejected")]
    ReceiverRejected,
    #[serde(rename = "ChfAbroadNotAllowed")]
    ChfAbroadNotAllowed,
    #[serde(rename = "AssetKycNeeded")]
    AssetKycNeeded,
    #[serde(rename = "CardNameMismatch")]
    CardNameMismatch,
    #[serde(rename = "UserDeleted")]
    UserDeleted,
    #[serde(rename = "VideoIdentNeeded")]
    VideoIdentNeeded,
    #[serde(rename = "MissingLiquidity")]
    MissingLiquidity,
    #[serde(rename = "KycDataNeeded")]
    KycDataNeeded,
    #[serde(rename = "BankTxNeeded")]
    BankTxNeeded,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::Unknown
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OutputBlockchain {
    #[serde(rename = "Bitcoin")]
    Bitcoin,
    #[serde(rename = "Lightning")]
    Lightning,
    #[serde(rename = "Monero")]
    Monero,
    #[serde(rename = "Ethereum")]
    Ethereum,
    #[serde(rename = "BinanceSmartChain")]
    BinanceSmartChain,
    #[serde(rename = "Optimism")]
    Optimism,
    #[serde(rename = "Arbitrum")]
    Arbitrum,
    #[serde(rename = "Polygon")]
    Polygon,
    #[serde(rename = "Base")]
    Base,
    #[serde(rename = "Haqq")]
    Haqq,
    #[serde(rename = "Liquid")]
    Liquid,
    #[serde(rename = "Arweave")]
    Arweave,
    #[serde(rename = "Cardano")]
    Cardano,
    #[serde(rename = "DeFiChain")]
    DeFiChain,
    #[serde(rename = "Railgun")]
    Railgun,
    #[serde(rename = "BinancePay")]
    BinancePay,
    #[serde(rename = "Solana")]
    Solana,
    #[serde(rename = "Gnosis")]
    Gnosis,
}

impl Default for OutputBlockchain {
    fn default() -> OutputBlockchain {
        Self::Bitcoin
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OutputPaymentMethod {
    #[serde(rename = "Bank")]
    Bank,
    #[serde(rename = "Instant")]
    Instant,
    #[serde(rename = "Card")]
    Card,
    #[serde(rename = "Crypto")]
    Crypto,
}

impl Default for OutputPaymentMethod {
    fn default() -> OutputPaymentMethod {
        Self::Bank
    }
}

