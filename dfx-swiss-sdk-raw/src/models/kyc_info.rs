/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KycInfo {
    #[serde(rename = "kycStatus")]
    pub kyc_status: KycStatus,
    #[serde(rename = "kycState")]
    pub kyc_state: KycState,
    #[serde(rename = "kycHash")]
    pub kyc_hash: String,
    #[serde(rename = "kycDataComplete")]
    pub kyc_data_complete: bool,
    #[serde(rename = "accountType")]
    pub account_type: AccountType,
    #[serde(rename = "tradingLimit")]
    pub trading_limit: Box<models::TradingLimit>,
    #[serde(rename = "sessionUrl", skip_serializing_if = "Option::is_none")]
    pub session_url: Option<String>,
    #[serde(rename = "setupUrl", skip_serializing_if = "Option::is_none")]
    pub setup_url: Option<String>,
    #[serde(rename = "blankedPhone", skip_serializing_if = "Option::is_none")]
    pub blanked_phone: Option<String>,
    #[serde(rename = "blankedMail", skip_serializing_if = "Option::is_none")]
    pub blanked_mail: Option<String>,
    #[serde(rename = "language")]
    pub language: Box<models::LanguageDto>,
}

impl KycInfo {
    pub fn new(kyc_status: KycStatus, kyc_state: KycState, kyc_hash: String, kyc_data_complete: bool, account_type: AccountType, trading_limit: models::TradingLimit, language: models::LanguageDto) -> KycInfo {
        KycInfo {
            kyc_status,
            kyc_state,
            kyc_hash,
            kyc_data_complete,
            account_type,
            trading_limit: Box::new(trading_limit),
            session_url: None,
            setup_url: None,
            blanked_phone: None,
            blanked_mail: None,
            language: Box::new(language),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum KycStatus {
    #[serde(rename = "NA")]
    Na,
    #[serde(rename = "Chatbot")]
    Chatbot,
    #[serde(rename = "OnlineId")]
    OnlineId,
    #[serde(rename = "VideoId")]
    VideoId,
    #[serde(rename = "Check")]
    Check,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "Rejected")]
    Rejected,
    #[serde(rename = "Terminated")]
    Terminated,
}

impl Default for KycStatus {
    fn default() -> KycStatus {
        Self::Na
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum KycState {
    #[serde(rename = "NA")]
    Na,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Reminded")]
    Reminded,
    #[serde(rename = "Review")]
    Review,
}

impl Default for KycState {
    fn default() -> KycState {
        Self::Na
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AccountType {
    #[serde(rename = "Personal")]
    Personal,
    #[serde(rename = "Organization")]
    Organization,
    #[serde(rename = "SoleProprietorship")]
    SoleProprietorship,
}

impl Default for AccountType {
    fn default() -> AccountType {
        Self::Personal
    }
}

