/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`payment_link_controller_cancel_payment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerCancelPaymentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_link_controller_confirm_payment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerConfirmPaymentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_link_controller_create_payment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerCreatePaymentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_link_controller_create_payment_link`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerCreatePaymentLinkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_link_controller_get_all_payment_links`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerGetAllPaymentLinksError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_link_controller_get_payment_history`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerGetPaymentHistoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_link_controller_get_user_payment_links_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerGetUserPaymentLinksConfigError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_link_controller_update_payment_link`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerUpdatePaymentLinkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_link_controller_update_user_payment_links_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerUpdateUserPaymentLinksConfigError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_link_controller_wait_for_payment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentLinkControllerWaitForPaymentError {
    UnknownValue(serde_json::Value),
}


pub async fn payment_link_controller_cancel_payment(configuration: &configuration::Configuration, link_id: Option<&str>, external_link_id: Option<&str>, external_payment_id: Option<&str>, key: Option<&str>) -> Result<models::PaymentLinkDto, Error<PaymentLinkControllerCancelPaymentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink/payment", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = link_id {
        local_var_req_builder = local_var_req_builder.query(&[("linkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_link_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalLinkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_payment_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalPaymentId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentLinkControllerCancelPaymentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_link_controller_confirm_payment(configuration: &configuration::Configuration, link_id: Option<&str>, external_link_id: Option<&str>, external_payment_id: Option<&str>, key: Option<&str>) -> Result<models::PaymentLinkDto, Error<PaymentLinkControllerConfirmPaymentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink/payment/confirm", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = link_id {
        local_var_req_builder = local_var_req_builder.query(&[("linkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_link_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalLinkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_payment_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalPaymentId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentLinkControllerConfirmPaymentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_link_controller_create_payment(configuration: &configuration::Configuration, create_payment_link_payment_dto: models::CreatePaymentLinkPaymentDto, link_id: Option<&str>, external_link_id: Option<&str>, key: Option<&str>, route: Option<&str>) -> Result<models::PaymentLinkDto, Error<PaymentLinkControllerCreatePaymentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink/payment", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = link_id {
        local_var_req_builder = local_var_req_builder.query(&[("linkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_link_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalLinkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = route {
        local_var_req_builder = local_var_req_builder.query(&[("route", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&create_payment_link_payment_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentLinkControllerCreatePaymentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_link_controller_create_payment_link(configuration: &configuration::Configuration, create_payment_link_dto: models::CreatePaymentLinkDto) -> Result<models::PaymentLinkDto, Error<PaymentLinkControllerCreatePaymentLinkError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_payment_link_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentLinkControllerCreatePaymentLinkError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_link_controller_get_all_payment_links(configuration: &configuration::Configuration, link_id: Option<&str>, external_link_id: Option<&str>, external_payment_id: Option<&str>) -> Result<Vec<models::PaymentLinkDto>, Error<PaymentLinkControllerGetAllPaymentLinksError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = link_id {
        local_var_req_builder = local_var_req_builder.query(&[("linkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_link_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalLinkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_payment_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalPaymentId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentLinkControllerGetAllPaymentLinksError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_link_controller_get_payment_history(configuration: &configuration::Configuration, status: Option<&str>, from: Option<String>, to: Option<String>, external_link_id: Option<&str>, key: Option<&str>) -> Result<Vec<models::PaymentLinkHistoryDto>, Error<PaymentLinkControllerGetPaymentHistoryError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink/history", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = from {
        local_var_req_builder = local_var_req_builder.query(&[("from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to {
        local_var_req_builder = local_var_req_builder.query(&[("to", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_link_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalLinkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentLinkControllerGetPaymentHistoryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_link_controller_get_user_payment_links_config(configuration: &configuration::Configuration, ) -> Result<models::PaymentLinkConfigDto, Error<PaymentLinkControllerGetUserPaymentLinksConfigError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink/config", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentLinkControllerGetUserPaymentLinksConfigError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_link_controller_update_payment_link(configuration: &configuration::Configuration, update_payment_link_dto: models::UpdatePaymentLinkDto, link_id: Option<&str>, external_link_id: Option<&str>, external_payment_id: Option<&str>) -> Result<models::PaymentLinkDto, Error<PaymentLinkControllerUpdatePaymentLinkError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = link_id {
        local_var_req_builder = local_var_req_builder.query(&[("linkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_link_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalLinkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_payment_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalPaymentId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_payment_link_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentLinkControllerUpdatePaymentLinkError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_link_controller_update_user_payment_links_config(configuration: &configuration::Configuration, update_payment_link_config_dto: models::UpdatePaymentLinkConfigDto) -> Result<(), Error<PaymentLinkControllerUpdateUserPaymentLinksConfigError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink/config", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_payment_link_config_dto);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PaymentLinkControllerUpdateUserPaymentLinksConfigError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_link_controller_wait_for_payment(configuration: &configuration::Configuration, link_id: Option<&str>, external_link_id: Option<&str>, external_payment_id: Option<&str>, key: Option<&str>) -> Result<models::PaymentLinkDto, Error<PaymentLinkControllerWaitForPaymentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/paymentLink/payment/wait", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = link_id {
        local_var_req_builder = local_var_req_builder.query(&[("linkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_link_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalLinkId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_payment_id {
        local_var_req_builder = local_var_req_builder.query(&[("externalPaymentId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentLinkControllerWaitForPaymentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

