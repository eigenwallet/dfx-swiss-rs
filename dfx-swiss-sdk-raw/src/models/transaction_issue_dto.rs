/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionIssueDto {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f64>,
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    #[serde(rename = "orderUid", skip_serializing_if = "Option::is_none")]
    pub order_uid: Option<String>,
    #[serde(rename = "senderIban", skip_serializing_if = "Option::is_none")]
    pub sender_iban: Option<String>,
    #[serde(rename = "receiverIban", skip_serializing_if = "Option::is_none")]
    pub receiver_iban: Option<String>,
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
}

impl TransactionIssueDto {
    pub fn new() -> TransactionIssueDto {
        TransactionIssueDto {
            id: None,
            uid: None,
            order_uid: None,
            sender_iban: None,
            receiver_iban: None,
            date: None,
        }
    }
}

