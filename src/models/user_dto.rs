/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserDto {
    #[serde(rename = "accountType", skip_serializing_if = "Option::is_none")]
    pub account_type: Option<AccountType>,
    #[serde(rename = "wallet")]
    pub wallet: String,
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "currency")]
    pub currency: serde_json::Value,
    #[serde(rename = "mail")]
    pub mail: String,
    #[serde(rename = "phone")]
    pub phone: String,
    #[serde(rename = "language")]
    pub language: Box<models::LanguageDto>,
    #[serde(rename = "kycStatus")]
    pub kyc_status: String,
    #[serde(rename = "kycState")]
    pub kyc_state: String,
    #[serde(rename = "kycLevel")]
    pub kyc_level: f64,
    #[serde(rename = "kycHash")]
    pub kyc_hash: String,
    #[serde(rename = "tradingLimit")]
    pub trading_limit: Box<models::TradingLimit>,
    #[serde(rename = "kycDataComplete")]
    pub kyc_data_complete: bool,
    #[serde(rename = "apiKeyCT")]
    pub api_key_ct: String,
    #[serde(rename = "apiFilterCT")]
    pub api_filter_ct: Vec<String>,
}

impl UserDto {
    pub fn new(wallet: String, address: String, status: Status, currency: serde_json::Value, mail: String, phone: String, language: models::LanguageDto, kyc_status: String, kyc_state: String, kyc_level: f64, kyc_hash: String, trading_limit: models::TradingLimit, kyc_data_complete: bool, api_key_ct: String, api_filter_ct: Vec<String>) -> UserDto {
        UserDto {
            account_type: None,
            wallet,
            address,
            status,
            currency,
            mail,
            phone,
            language: Box::new(language),
            kyc_status,
            kyc_state,
            kyc_level,
            kyc_hash,
            trading_limit: Box::new(trading_limit),
            kyc_data_complete,
            api_key_ct,
            api_filter_ct,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AccountType {
    #[serde(rename = "Personal")]
    Personal,
    #[serde(rename = "Organization")]
    Organization,
    #[serde(rename = "SoleProprietorship")]
    SoleProprietorship,
}

impl Default for AccountType {
    fn default() -> AccountType {
        Self::Personal
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "NA")]
    Na,
    #[serde(rename = "Active")]
    Active,
    #[serde(rename = "Blocked")]
    Blocked,
    #[serde(rename = "Deleted")]
    Deleted,
}

impl Default for Status {
    fn default() -> Status {
        Self::Na
    }
}

