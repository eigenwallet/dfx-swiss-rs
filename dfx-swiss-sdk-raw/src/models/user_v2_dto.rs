/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserV2Dto {
    /// Unique account id
    #[serde(rename = "accountId")]
    pub account_id: f64,
    #[serde(rename = "accountType", skip_serializing_if = "Option::is_none")]
    pub account_type: Option<AccountType>,
    #[serde(rename = "mail", skip_serializing_if = "Option::is_none")]
    pub mail: Option<String>,
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    #[serde(rename = "language")]
    pub language: Box<models::LanguageDto>,
    #[serde(rename = "currency")]
    pub currency: Box<models::FiatDto>,
    #[serde(rename = "tradingLimit")]
    pub trading_limit: Box<models::TradingLimit>,
    #[serde(rename = "kyc")]
    pub kyc: Box<models::UserKycDto>,
    #[serde(rename = "volumes")]
    pub volumes: Box<models::VolumesDto>,
    #[serde(rename = "addresses")]
    pub addresses: Vec<models::UserAddressDto>,
    #[serde(rename = "disabledAddresses")]
    pub disabled_addresses: Vec<models::UserAddressDto>,
    #[serde(rename = "activeAddress", skip_serializing_if = "Option::is_none")]
    pub active_address: Option<Box<models::UserAddressDto>>,
    #[serde(rename = "paymentLink")]
    pub payment_link: Box<models::UserPaymentLinkDto>,
    #[serde(rename = "apiKeyCT", skip_serializing_if = "Option::is_none")]
    pub api_key_ct: Option<String>,
    #[serde(rename = "apiFilterCT", skip_serializing_if = "Option::is_none")]
    pub api_filter_ct: Option<Vec<String>>,
}

impl UserV2Dto {
    pub fn new(account_id: f64, language: models::LanguageDto, currency: models::FiatDto, trading_limit: models::TradingLimit, kyc: models::UserKycDto, volumes: models::VolumesDto, addresses: Vec<models::UserAddressDto>, disabled_addresses: Vec<models::UserAddressDto>, payment_link: models::UserPaymentLinkDto) -> UserV2Dto {
        UserV2Dto {
            account_id,
            account_type: None,
            mail: None,
            phone: None,
            language: Box::new(language),
            currency: Box::new(currency),
            trading_limit: Box::new(trading_limit),
            kyc: Box::new(kyc),
            volumes: Box::new(volumes),
            addresses,
            disabled_addresses,
            active_address: None,
            payment_link: Box::new(payment_link),
            api_key_ct: None,
            api_filter_ct: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AccountType {
    #[serde(rename = "Personal")]
    Personal,
    #[serde(rename = "Organization")]
    Organization,
    #[serde(rename = "SoleProprietorship")]
    SoleProprietorship,
}

impl Default for AccountType {
    fn default() -> AccountType {
        Self::Personal
    }
}

