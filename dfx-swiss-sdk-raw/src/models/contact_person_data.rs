/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContactPersonData {
    #[serde(rename = "street")]
    pub street: String,
    #[serde(rename = "houseNumber", skip_serializing_if = "Option::is_none")]
    pub house_number: Option<String>,
    #[serde(rename = "city")]
    pub city: String,
    #[serde(rename = "zip")]
    pub zip: String,
    #[serde(rename = "country")]
    pub country: Box<models::EntityDto>,
    #[serde(rename = "firstName")]
    pub first_name: String,
    #[serde(rename = "lastName")]
    pub last_name: String,
}

impl ContactPersonData {
    pub fn new(street: String, city: String, zip: String, country: models::EntityDto, first_name: String, last_name: String) -> ContactPersonData {
        ContactPersonData {
            street,
            house_number: None,
            city,
            zip,
            country: Box::new(country),
            first_name,
            last_name,
        }
    }
}

