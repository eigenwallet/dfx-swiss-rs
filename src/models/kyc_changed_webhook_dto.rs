/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KycChangedWebhookDto {
    /// Unique account id
    #[serde(rename = "accountId")]
    pub account_id: f64,
    /// User address
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "data")]
    pub data: Box<models::KycWebhookData>,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
}

impl KycChangedWebhookDto {
    pub fn new(account_id: f64, r#type: Type, data: models::KycWebhookData) -> KycChangedWebhookDto {
        KycChangedWebhookDto {
            account_id,
            id: None,
            r#type,
            data: Box::new(data),
            reason: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "KycChanged")]
    KycChanged,
}

impl Default for Type {
    fn default() -> Type {
        Self::KycChanged
    }
}

