/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KycManualIdentData {
    #[serde(rename = "firstName")]
    pub first_name: String,
    #[serde(rename = "lastName")]
    pub last_name: String,
    #[serde(rename = "birthName", skip_serializing_if = "Option::is_none")]
    pub birth_name: Option<String>,
    #[serde(rename = "birthday")]
    pub birthday: String,
    #[serde(rename = "nationality")]
    pub nationality: Box<models::EntityDto>,
    #[serde(rename = "birthplace", skip_serializing_if = "Option::is_none")]
    pub birthplace: Option<String>,
    #[serde(rename = "gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<Gender>,
    #[serde(rename = "documentType")]
    pub document_type: DocumentType,
    #[serde(rename = "documentNumber")]
    pub document_number: String,
    #[serde(rename = "document")]
    pub document: Box<models::KycFileData>,
}

impl KycManualIdentData {
    pub fn new(first_name: String, last_name: String, birthday: String, nationality: models::EntityDto, document_type: DocumentType, document_number: String, document: models::KycFileData) -> KycManualIdentData {
        KycManualIdentData {
            first_name,
            last_name,
            birth_name: None,
            birthday,
            nationality: Box::new(nationality),
            birthplace: None,
            gender: None,
            document_type,
            document_number,
            document: Box::new(document),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "Male")]
    Male,
    #[serde(rename = "Female")]
    Female,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::Male
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DocumentType {
    #[serde(rename = "IDCARD")]
    Idcard,
    #[serde(rename = "PASSPORT")]
    Passport,
    #[serde(rename = "DRIVERS_LICENSE")]
    DriversLicense,
    #[serde(rename = "RESIDENCE_PERMIT")]
    ResidencePermit,
}

impl Default for DocumentType {
    fn default() -> DocumentType {
        Self::Idcard
    }
}

