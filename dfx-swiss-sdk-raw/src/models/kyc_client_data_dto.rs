/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KycClientDataDto {
    #[serde(rename = "mail", skip_serializing_if = "Option::is_none")]
    pub mail: Option<String>,
    #[serde(rename = "firstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "lastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "street", skip_serializing_if = "Option::is_none")]
    pub street: Option<String>,
    #[serde(rename = "houseNumber", skip_serializing_if = "Option::is_none")]
    pub house_number: Option<String>,
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "zip", skip_serializing_if = "Option::is_none")]
    pub zip: Option<String>,
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<Box<models::CountryDto>>,
    #[serde(rename = "nationality", skip_serializing_if = "Option::is_none")]
    pub nationality: Option<Box<models::CountryDto>>,
    #[serde(rename = "birthday", skip_serializing_if = "Option::is_none")]
    pub birthday: Option<String>,
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    #[serde(rename = "kycStatus")]
    pub kyc_status: KycStatus,
    #[serde(rename = "kycLevel")]
    pub kyc_level: f64,
    #[serde(rename = "kycHash")]
    pub kyc_hash: String,
    #[serde(rename = "tradingLimit")]
    pub trading_limit: Box<models::TradingLimit>,
    #[serde(rename = "id")]
    pub id: String,
}

impl KycClientDataDto {
    pub fn new(kyc_status: KycStatus, kyc_level: f64, kyc_hash: String, trading_limit: models::TradingLimit, id: String) -> KycClientDataDto {
        KycClientDataDto {
            mail: None,
            first_name: None,
            last_name: None,
            street: None,
            house_number: None,
            city: None,
            zip: None,
            country: None,
            nationality: None,
            birthday: None,
            phone: None,
            kyc_status,
            kyc_level,
            kyc_hash,
            trading_limit: Box::new(trading_limit),
            id,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum KycStatus {
    #[serde(rename = "NA")]
    Na,
    #[serde(rename = "Light")]
    Light,
    #[serde(rename = "Full")]
    Full,
    #[serde(rename = "Rejected")]
    Rejected,
}

impl Default for KycStatus {
    fn default() -> KycStatus {
        Self::Na
    }
}

