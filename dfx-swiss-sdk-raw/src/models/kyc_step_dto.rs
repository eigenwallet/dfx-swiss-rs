/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KycStepDto {
    #[serde(rename = "name")]
    pub name: Name,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    #[serde(rename = "sequenceNumber")]
    pub sequence_number: f64,
    #[serde(rename = "isCurrent")]
    pub is_current: bool,
}

impl KycStepDto {
    pub fn new(name: Name, status: Status, sequence_number: f64, is_current: bool) -> KycStepDto {
        KycStepDto {
            name,
            r#type: None,
            status,
            reason: None,
            sequence_number,
            is_current,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Name {
    #[serde(rename = "ContactData")]
    ContactData,
    #[serde(rename = "PersonalData")]
    PersonalData,
    #[serde(rename = "NationalityData")]
    NationalityData,
    #[serde(rename = "LegalEntity")]
    LegalEntity,
    #[serde(rename = "OwnerDirectory")]
    OwnerDirectory,
    #[serde(rename = "CommercialRegister")]
    CommercialRegister,
    #[serde(rename = "SignatoryPower")]
    SignatoryPower,
    #[serde(rename = "Authority")]
    Authority,
    #[serde(rename = "BeneficialOwner")]
    BeneficialOwner,
    #[serde(rename = "OperationalActivity")]
    OperationalActivity,
    #[serde(rename = "Ident")]
    Ident,
    #[serde(rename = "FinancialData")]
    FinancialData,
    #[serde(rename = "AdditionalDocuments")]
    AdditionalDocuments,
    #[serde(rename = "ResidencePermit")]
    ResidencePermit,
    #[serde(rename = "DfxApproval")]
    DfxApproval,
    #[serde(rename = "PaymentAgreement")]
    PaymentAgreement,
}

impl Default for Name {
    fn default() -> Name {
        Self::ContactData
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Auto")]
    Auto,
    #[serde(rename = "Video")]
    Video,
    #[serde(rename = "Manual")]
    Manual,
    #[serde(rename = "SumsubAuto")]
    SumsubAuto,
    #[serde(rename = "SumsubVideo")]
    SumsubVideo,
}

impl Default for Type {
    fn default() -> Type {
        Self::Auto
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "NotStarted")]
    NotStarted,
    #[serde(rename = "InProgress")]
    InProgress,
    #[serde(rename = "InReview")]
    InReview,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "Outdated")]
    Outdated,
    #[serde(rename = "DataRequested")]
    DataRequested,
    #[serde(rename = "OnHold")]
    OnHold,
}

impl Default for Status {
    fn default() -> Status {
        Self::NotStarted
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "AccountExists")]
    AccountExists,
    #[serde(rename = "AccountMergeRequested")]
    AccountMergeRequested,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::AccountExists
    }
}

