/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KycFinancialQuestion {
    /// Question key
    #[serde(rename = "key")]
    pub key: String,
    /// Question type
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Question title (translated)
    #[serde(rename = "title")]
    pub title: String,
    /// Question description (translated)
    #[serde(rename = "description")]
    pub description: String,
    /// Response options
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<models::KycFinancialOption>>,
}

impl KycFinancialQuestion {
    pub fn new(key: String, r#type: Type, title: String, description: String) -> KycFinancialQuestion {
        KycFinancialQuestion {
            key,
            r#type,
            title,
            description,
            options: None,
        }
    }
}
/// Question type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Confirmation")]
    Confirmation,
    #[serde(rename = "SingleChoice")]
    SingleChoice,
    #[serde(rename = "MultipleChoice")]
    MultipleChoice,
    #[serde(rename = "Text")]
    Text,
}

impl Default for Type {
    fn default() -> Type {
        Self::Confirmation
    }
}

