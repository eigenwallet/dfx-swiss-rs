/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdatePaymentLinkConfigDto {
    #[serde(rename = "standards", skip_serializing_if = "Option::is_none")]
    pub standards: Option<Vec<Standards>>,
    #[serde(rename = "blockchains", skip_serializing_if = "Option::is_none")]
    pub blockchains: Option<Vec<Blockchains>>,
    #[serde(rename = "minCompletionStatus", skip_serializing_if = "Option::is_none")]
    pub min_completion_status: Option<String>,
    #[serde(rename = "displayQr", skip_serializing_if = "Option::is_none")]
    pub display_qr: Option<bool>,
    #[serde(rename = "recipient", skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Box<models::PaymentLinkRecipientDto>>,
    #[serde(rename = "paymentTimeout", skip_serializing_if = "Option::is_none")]
    pub payment_timeout: Option<f64>,
}

impl UpdatePaymentLinkConfigDto {
    pub fn new() -> UpdatePaymentLinkConfigDto {
        UpdatePaymentLinkConfigDto {
            standards: None,
            blockchains: None,
            min_completion_status: None,
            display_qr: None,
            recipient: None,
            payment_timeout: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Standards {
    #[serde(rename = "OpenCryptoPay")]
    OpenCryptoPay,
    #[serde(rename = "LightningBolt11")]
    LightningBolt11,
    #[serde(rename = "PayToAddress")]
    PayToAddress,
}

impl Default for Standards {
    fn default() -> Standards {
        Self::OpenCryptoPay
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Blockchains {
    #[serde(rename = "Arbitrum")]
    Arbitrum,
    #[serde(rename = "Base")]
    Base,
    #[serde(rename = "Ethereum")]
    Ethereum,
    #[serde(rename = "Lightning")]
    Lightning,
    #[serde(rename = "Monero")]
    Monero,
    #[serde(rename = "Optimism")]
    Optimism,
    #[serde(rename = "Polygon")]
    Polygon,
    #[serde(rename = "Bitcoin")]
    Bitcoin,
    #[serde(rename = "BinancePay")]
    BinancePay,
    #[serde(rename = "Solana")]
    Solana,
}

impl Default for Blockchains {
    fn default() -> Blockchains {
        Self::Arbitrum
    }
}

