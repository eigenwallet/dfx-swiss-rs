/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateSupportIssueDto {
    #[serde(rename = "message")]
    pub message: String,
    /// Base64 encoded file
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Name of the file
    #[serde(rename = "fileName", skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "reason")]
    pub reason: Reason,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "transaction", skip_serializing_if = "Option::is_none")]
    pub transaction: Option<Box<models::TransactionIssueDto>>,
    #[serde(rename = "limitRequest", skip_serializing_if = "Option::is_none")]
    pub limit_request: Option<Box<models::LimitRequestDto>>,
}

impl CreateSupportIssueDto {
    pub fn new(message: String, r#type: Type, reason: Reason, name: String) -> CreateSupportIssueDto {
        CreateSupportIssueDto {
            message,
            file: None,
            file_name: None,
            r#type,
            reason,
            name,
            transaction: None,
            limit_request: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "GenericIssue")]
    GenericIssue,
    #[serde(rename = "TransactionIssue")]
    TransactionIssue,
    #[serde(rename = "KycIssue")]
    KycIssue,
    #[serde(rename = "LimitRequest")]
    LimitRequest,
    #[serde(rename = "PartnershipRequest")]
    PartnershipRequest,
    #[serde(rename = "NotificationOfChanges")]
    NotificationOfChanges,
    #[serde(rename = "BugReport")]
    BugReport,
}

impl Default for Type {
    fn default() -> Type {
        Self::GenericIssue
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "Other")]
    Other,
    #[serde(rename = "DataRequest")]
    DataRequest,
    #[serde(rename = "FundsNotReceived")]
    FundsNotReceived,
    #[serde(rename = "TransactionMissing")]
    TransactionMissing,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::Other
    }
}

