/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuyPaymentInfoDto {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "bank")]
    pub bank: String,
    #[serde(rename = "street")]
    pub street: String,
    #[serde(rename = "number")]
    pub number: String,
    #[serde(rename = "zip")]
    pub zip: String,
    #[serde(rename = "city")]
    pub city: String,
    #[serde(rename = "country")]
    pub country: String,
    #[serde(rename = "iban", skip_serializing_if = "Option::is_none")]
    pub iban: Option<String>,
    #[serde(rename = "bic")]
    pub bic: String,
    #[serde(rename = "sepaInstant")]
    pub sepa_instant: bool,
    /// Transaction order ID
    #[serde(rename = "id")]
    pub id: f64,
    /// UID of the transaction order
    #[serde(rename = "uid")]
    pub uid: String,
    /// Price timestamp
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "routeId")]
    pub route_id: f64,
    #[serde(rename = "remittanceInfo", skip_serializing_if = "Option::is_none")]
    pub remittance_info: Option<String>,
    #[serde(rename = "minDeposit")]
    pub min_deposit: Box<models::MinAmount>,
    /// Fee in percentage
    #[serde(rename = "fee")]
    pub fee: f64,
    /// Minimum fee in source currency
    #[serde(rename = "minFee")]
    pub min_fee: f64,
    /// Fee infos in source currency
    #[serde(rename = "fees")]
    pub fees: Box<models::FeeDto>,
    /// Minimum volume in source currency
    #[serde(rename = "minVolume")]
    pub min_volume: f64,
    /// Maximum volume in source currency
    #[serde(rename = "maxVolume")]
    pub max_volume: f64,
    /// Amount in source currency
    #[serde(rename = "amount")]
    pub amount: f64,
    /// Source currency
    #[serde(rename = "currency")]
    pub currency: Box<models::FiatDto>,
    /// Minimum fee in target asset
    #[serde(rename = "minFeeTarget")]
    pub min_fee_target: f64,
    /// Fee infos in target asset
    #[serde(rename = "feesTarget")]
    pub fees_target: Box<models::FeeDto>,
    /// Minimum volume in target asset
    #[serde(rename = "minVolumeTarget")]
    pub min_volume_target: f64,
    /// Maximum volume in target asset
    #[serde(rename = "maxVolumeTarget")]
    pub max_volume_target: f64,
    /// Exchange rate in source/target
    #[serde(rename = "exchangeRate")]
    pub exchange_rate: f64,
    /// Final rate (incl. fees) in source/target
    #[serde(rename = "rate")]
    pub rate: f64,
    /// Exact or approximate price
    #[serde(rename = "exactPrice")]
    pub exact_price: bool,
    #[serde(rename = "priceSteps")]
    pub price_steps: Vec<models::PriceStep>,
    /// Estimated amount in target asset
    #[serde(rename = "estimatedAmount")]
    pub estimated_amount: f64,
    /// Target asset
    #[serde(rename = "asset")]
    pub asset: Box<models::AssetDto>,
    /// Payment request (e.g. GiroCode content)
    #[serde(rename = "paymentRequest", skip_serializing_if = "Option::is_none")]
    pub payment_request: Option<String>,
    #[serde(rename = "isValid")]
    pub is_valid: bool,
    /// Error message in case isValid is false
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Error>,
}

impl BuyPaymentInfoDto {
    pub fn new(name: String, bank: String, street: String, number: String, zip: String, city: String, country: String, bic: String, sepa_instant: bool, id: f64, uid: String, timestamp: String, route_id: f64, min_deposit: models::MinAmount, fee: f64, min_fee: f64, fees: models::FeeDto, min_volume: f64, max_volume: f64, amount: f64, currency: models::FiatDto, min_fee_target: f64, fees_target: models::FeeDto, min_volume_target: f64, max_volume_target: f64, exchange_rate: f64, rate: f64, exact_price: bool, price_steps: Vec<models::PriceStep>, estimated_amount: f64, asset: models::AssetDto, is_valid: bool) -> BuyPaymentInfoDto {
        BuyPaymentInfoDto {
            name,
            bank,
            street,
            number,
            zip,
            city,
            country,
            iban: None,
            bic,
            sepa_instant,
            id,
            uid,
            timestamp,
            route_id,
            remittance_info: None,
            min_deposit: Box::new(min_deposit),
            fee,
            min_fee,
            fees: Box::new(fees),
            min_volume,
            max_volume,
            amount,
            currency: Box::new(currency),
            min_fee_target,
            fees_target: Box::new(fees_target),
            min_volume_target,
            max_volume_target,
            exchange_rate,
            rate,
            exact_price,
            price_steps,
            estimated_amount,
            asset: Box::new(asset),
            payment_request: None,
            is_valid,
            error: None,
        }
    }
}
/// Error message in case isValid is false
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Error {
    #[serde(rename = "AmountTooLow")]
    AmountTooLow,
    #[serde(rename = "AmountTooHigh")]
    AmountTooHigh,
    #[serde(rename = "BankTransactionMissing")]
    BankTransactionMissing,
    #[serde(rename = "KycRequired")]
    KycRequired,
    #[serde(rename = "KycDataRequired")]
    KycDataRequired,
    #[serde(rename = "KycRequiredInstant")]
    KycRequiredInstant,
    #[serde(rename = "LimitExceeded")]
    LimitExceeded,
    #[serde(rename = "NationalityNotAllowed")]
    NationalityNotAllowed,
    #[serde(rename = "NameRequired")]
    NameRequired,
    #[serde(rename = "VideoIdentRequired")]
    VideoIdentRequired,
}

impl Default for Error {
    fn default() -> Error {
        Self::AmountTooLow
    }
}

