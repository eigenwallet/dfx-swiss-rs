/*
 * DFX API
 *
 * DFX API PRD (updated on 7/3/2025, 12:42:13 PM)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CountryDto {
    #[serde(rename = "id")]
    pub id: f64,
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "foreignName")]
    pub foreign_name: String,
    /// Allowed to access DFX API (current IP location)
    #[serde(rename = "locationAllowed")]
    pub location_allowed: bool,
    /// Allowed for IBANs
    #[serde(rename = "ibanAllowed")]
    pub iban_allowed: bool,
    /// Allowed for KYC
    #[serde(rename = "kycAllowed")]
    pub kyc_allowed: bool,
    /// Allowed for organization KYC
    #[serde(rename = "kycOrganizationAllowed")]
    pub kyc_organization_allowed: bool,
    /// Allowed nationality for KYC
    #[serde(rename = "nationalityAllowed")]
    pub nationality_allowed: bool,
    /// Allowed for bank transactions
    #[serde(rename = "bankAllowed")]
    pub bank_allowed: bool,
    /// Allowed for card transactions
    #[serde(rename = "cardAllowed")]
    pub card_allowed: bool,
    /// Allowed for crypto transactions
    #[serde(rename = "cryptoAllowed")]
    pub crypto_allowed: bool,
}

impl CountryDto {
    pub fn new(id: f64, symbol: String, name: String, foreign_name: String, location_allowed: bool, iban_allowed: bool, kyc_allowed: bool, kyc_organization_allowed: bool, nationality_allowed: bool, bank_allowed: bool, card_allowed: bool, crypto_allowed: bool) -> CountryDto {
        CountryDto {
            id,
            symbol,
            name,
            foreign_name,
            location_allowed,
            iban_allowed,
            kyc_allowed,
            kyc_organization_allowed,
            nationality_allowed,
            bank_allowed,
            card_allowed,
            crypto_allowed,
        }
    }
}

